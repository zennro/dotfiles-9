#+TITLE: Emacs Configuration
#+OPTIONS: toc:5 h:5

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD_EXTRA: Emacs Configuration as pretty HTML. See <tt>~/.emacs.d/colbell.org</tt> for the actual configuration source.
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT: view:info toc:5

* Introduction
** On Emacs

#+begin_quote
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

-- Neal Stephenson, "[[http://www.cryptonomicon.com/beginning.html][In the Beginning was the Command Line]]"
#+end_quote

** About This File

I've converted my Emacs configuration to an Org file which
can be loaded using =(org-babel-load-file /path/to/file)=. The
original inspiration came from a blog post by [[http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/][Sacha Chua]].

I'm also using the [[https://github.com/jwiegley/use-package][use-package]] macro to simplify package handing.

* Settings
** Load "Customize" Interface.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
(load custom-file t)
#+end_src

** Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Colin Noel Bell"
        user-mail-address "col@baibell.org")
#+END_SRC
** Initialization

Seed the random number generator.

#+begin_src emacs-lisp
  (random t)
#+end_src

*** Emacs Directories

Add all vendor libraries to load path

#+begin_src emacs-lisp
  (defun add-subdirs-to-load-path(parent-dir)
    "Add first level subdirectories in parent-dir to load path."
    (dolist (f (directory-files parent-dir))
      (let ((name (concat parent-dir "/" f)))
        (when (and (file-directory-p name)
                   (not (equal f ".."))
                   (not (equal f ".")))
          (add-to-list 'load-path name)))))

  (add-to-list 'load-path (expand-file-name "vendor" user-emacs-directory ))
  (add-subdirs-to-load-path (expand-file-name "vendor" user-emacs-directory))
#+end_src

*** Package Manager

Add package sources and initialize package manager.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" .  "http://melpa.org/packages/") 'APPEND)
(package-initialize)
#+end_src

I use 'use-package' to tidy up my Emacs configuration.

#+begin_src emacs-lisp
(unless (require 'use-package nil t)
  (progn
    (package-refresh-contents)
    (package-install 'use-package)
    (require 'use-package)))
#+end_src

Paradox is a powerful UI for the package manager.

#+begin_src emacs-lisp
  (use-package paradox
    :ensure paradox

    :init
    (progn
      (setq paradox-github-token t)  ;; Don't ask for Github integration.
      (setq paradox-display-download-count t)))
#+end_src

** U.I.
*** Diminish

Reduce clutter in the mode-line. Load it early as use-package uses it.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** Theme

#+begin_src emacs-lisp
  (use-package solarized-theme
    :ensure solarized-theme
    :defer t

    :init
    (progn
      (setq solarized-distinct-fringe-background t)
      (setq solarized-scale-org-headlines nil)
      (setq solarized-use-variable-pitch nil)
      ;;(setq solarized-use-more-italic t)
      ;;(setq solarized-use-less-bold t)
      (load-theme 'solarized-light t)))

#+end_src

*** Font

#+begin_src emacs-lisp
  (set-frame-font "Source Code Pro-10" nil t)
  ;;(set-frame-font "DejaVu Sans Mono-10" nil t)
#+end_src

*** Remove Unnecessary Clutter

#+begin_src emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1))
#+end_src

*** Pretty Symbols

E.G. Î» for lambda in coding buffers.

#+begin_src emacs-lisp
(global-prettify-symbols-mode)
#+end_src

*** GUI Dialogs

Don't use them.

#+begin_src emacs-lisp
(setq use-file-dialog nil)
(setq use-dialog-box nil)
#+end_src

*** Mode Line
**** Smart Mode Line

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :ensure smart-mode-line
    :init
    (progn
      (add-to-list 'sml/replacer-regexp-list '("^~/dotfiles/emacs\\.d/" ":ED:") t)
      (sml/setup)))
#+end_src

**** Indicators

Some useful stuff in the modeline.

#+begin_src emacs-lisp
  (column-number-mode)
  (size-indication-mode)
  (display-time-mode)
#+end_src

**** Which Function

For coding buffers show the name of the current function in the
mode line.

#+begin_src emacs-lisp
  (use-package which-func)
  :init
  (progn
    (which-func-mode 1))
#+end_src

**** Anzu

For searches display the current match and total matches information
in the mode line.

#+begin_src emacs-lisp
  (use-package anzu
    :ensure anzu
    :diminish anzu-mode

    :init
    (progn
      (global-anzu-mode +1)
      (setq anzu-search-threshold 1000)))
#+end_src

*** Battery Status

Put the battery status in the mode-line.

#+begin_src emacs-lisp
  (use-package battery
    :init
    (progn
      (when
          (and battery-status-function
               (not (string-match-p "N/A"
                                    (battery-format "%B"
                                                    (funcall battery-status-function)))))
        (setq battery-mode-line-format "[%b%p%%%% %t]")
        (display-battery-mode 1))))
#+end_src

*** Crosshairs

#+begin_src emacs-lisp
  (use-package crosshairs
    :ensure crosshairs
    :bind (("<f11>" . flash-crosshairs)))
#+end_src

*** Minibuffer

Y/N for yes/no in prompts.

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Give it some room.

#+begin_src emacs-lisp
(setq resize-mini-windows t)
(setq max-mini-window-height 0.33)
#+end_src

Don't let the cursor go into the minibuffer prompt

#+begin_src emacs-lisp
  (setq minibuffer-prompt-properties
        (quote (read-only t point-entered minibuffer-avoid-prompt
                          face minibuffer-prompt)))
#+end_src
*** Line Numbers

Show line numbers in fringe

#+begin_src emacs-lisp
  (use-package nlinum
    :ensure nlinum

    :init
    (progn
      ;; precalculate the line number width to avoid horizontal jumps on scrolling.
      ;; From: http://www.emacswiki.org/LineNumbers
      (add-hook
       'nlinum-mode-hook
       (lambda ()
         (setq nlinum--width
               (length (number-to-string
                        (count-lines (point-min) (point-max)))))))))
#+end_src

*** General

Move mouse cursor when text cursor gets too close.

#+begin_src emacs-lisp
(mouse-avoidance-mode 'exile)
#+end_src

Blink text cursor forever. I like to know where the cursor is.

#+begin_src emacs-lisp
  (setq blink-cursor-blinks 0)
  (blink-cursor-mode)
#+end_src

Use a visible bell instead of a beep.

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Prompt to exit Emacs

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src
** Helm
Helm is an interactive completion tool.
#+begin_src emacs-lisp
  (use-package helm
    :ensure helm
    :diminish helm-mode

    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 250)
      (setq helm-idle-delay 0.0)        ; update fast sources immediately (doesn't).
      (setq helm-input-idle-delay 0.01) ; this actually updates things relatively quickly.
      (setq helm-quick-update t)
      (setq helm-M-x-requires-pattern nil)
      (setq helm-ff-skip-boring-files t)
      (setq enable-recursive-minibuffers t)
      (setq helm-buffers-fuzzy-matching t)
      (setq helm-split-window-in-side-p t)

      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      (helm-mode 1))

    :bind (("M-x"                  . helm-M-x)
           ("M-y"                  . helm-show-kill-ring)
           ("C-o h"                . helm-mini)
           ("C-c f"                . helm-recentf)
           ("C-x b"                . helm-buffers-list)
           ("C-x C-f"              . helm-find-files)
           ("C-h a"                . helm-apropos)
           ("C-x C-i"              . imenu)
           ([remap occur]          . helm-occur)
           ([remap list-buffers]   . helm-buffers-list)
           ([remap dabbrev-expand] . helm-dabbrev)))
#+end_src

*** Helm-descbinds

Show current key bindings

#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure helm-descbinds
    :bind (("C-h b" . helm-descbinds)))
#+end_src
** General
*** Imenu
*** Tabs

Don't use them, use spaces instead. Default spacing to 2 spaces.

#+begin_src emacs-lisp
  (set-default 'indent-tabs-mode nil)
  (setq-default tab-width 2)
#+end_src

*** Key Chords
#+begin_src emacs-lisp
  (use-package key-chord
    :ensure key-chord

    :init
    (progn
      (key-chord-mode 1)
      (setq key-chord-two-keys-delay 0.2)))
#+end_src

*** Backup Files

#+begin_src emacs-lisp
  (setq backup-by-copying t) ;; Don't clobber symlinks, owner, group etc.
#+end_src

Don't clutter the disk with Emacs save files. Store them in =~/.emacs.d/backups=.

#+begin_src emacs-lisp
(setq version-control t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq delete-old-versions t)
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
(setq vc-make-backup-files t) ;; Make backups of files, even when they're in version control
#+end_src

*** Emacs Server

Start Emacs server on first Emacs instance.

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))

  (setenv "EDITOR" "emacsclient")
#+end_src
*** Auto-correct
#+begin_src emacs-lisp
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
  (setq save-abbrevs 'silently)

  (if (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))

  ;;(add-hook 'text-mode-hook (lambda () (abbrev-mode 1)))
  (setq-default abbrev-mode t)

  ;; Hide in mode line.
  (diminish 'abbrev-mode)

  ;; From http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
  (defun cnb/ispell-word-then-abbrev (p)
    "Call `ispell-word'. Then create an abbrev for the correction made.
     With prefix P, create local abbrev. Otherwise it will be global."
    (interactive "P")
    (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
      ;; Hide the prefix arg from ispell-word
      (let ((current-prefix-arg nil))
        (call-interactively 'ispell-word))
      (setq aft (downcase (or (thing-at-point 'word) "")))
      (unless (string= aft bef)
        (message "\"%s\" now expands to \"%s\" %sally"
                 bef aft (if p "loc" "glob"))
        (define-abbrev
          (if p local-abbrev-table global-abbrev-table)
          bef aft))))

  (global-set-key "\C-oi" 'cnb/ispell-word-then-abbrev)
#+end_src
*** Dired

Directory view/editing.

#+begin_src emacs-lisp
  (defun cnb/dired-back-to-top ()
    "Move to the first file name in the dired buffer"
    (interactive)
    (let (has-omit-mode has-hide-details-mode line-nbr)
      (when (and (boundp 'dired-omit-mode) dired-omit-mode)
        (setq has-omit-mode t))
      (when (and (boundp 'dired-hide-details-mode) dired-hide-details-mode)
        (setq has-hide-details-mode t))
      (cond
       ((and has-omit-mode has-hide-details-mode)
        (setq line-nbr 1))
       (has-omit-mode
        (setq line-nbr 3))
       (has-hide-details-mode
        (setq line-nbr 3))
       (t
        (setq line-nbr 3)))
      (message (number-to-string line-nbr))
      (beginning-of-buffer)
      (dired-next-line line-nbr)))

  (defun cnb/old-dired-back-to-top ()
    "Move to the first file name in the dired buffer"
    (interactive)
    (let* (line-nbr)
      (if (and (boundp 'dired-hide-details-mode) dired-hide-details-mode)
          (setq line-nbr 3)
        (setq line-nbr 4))
      (if (and (boundp 'dired-omit-mode) dired-omit-mode)
          (setq line-nbr 2))
      (beginning-of-buffer)
      (dired-next-line line-nbr)))

  (defun cnb/dired-jump-to-bottom ()
    "Jump to last file in dired buffer"
    (interactive)
    (end-of-buffer)
    (dired-next-line -1))


  (use-package dired
    :init
    (progn
      (setq dired-listing-switches "-alhGv --group-directories-first")
      (setq dired-dwim-target t)
      (setq dired-recursive-copies 'always)
      (setq dired-recursive-deletes 'always)
      (setq diredp-hide-details-initially-flag nil)

      (when (boundp 'dired-mode-map)
        (define-key dired-mode-map
          (vector 'remap 'beginning-of-buffer) 'cnb/dired-back-to-top)

        (define-key dired-mode-map
          (vector 'remap 'end-of-buffer) 'cnb/dired-jump-to-bottom)

        ;; Sort dired.
        (defvar cnb/dired-sort-keymap (make-sparse-keymap))
        (define-key dired-mode-map "s" cnb/dired-sort-keymap)

        (define-key cnb/dired-sort-keymap "s"
          (lambda () "sort by Size" (interactive)
            (dired-sort-other (concat dired-listing-switches " -S"))))
        (define-key cnb/dired-sort-keymap "S"
          (lambda () "sort by Size REV" (interactive)
            (dired-sort-other (concat dired-listing-switches " -rS"))))
        (define-key cnb/dired-sort-keymap "n"
          (lambda () "sort by Name REV" (interactive)
            (dired-sort-other dired-listing-switches)))
        (define-key cnb/dired-sort-keymap "N"
          (lambda () "sort by Name" (interactive)
            (dired-sort-other (concat dired-listing-switches " -r"))))
        (define-key cnb/dired-sort-keymap "t"
          (lambda () "sort by Name REV" (interactive)
            (dired-sort-other (concat dired-listing-switches " -t"))))
        (define-key cnb/dired-sort-keymap "T"
          (lambda () "sort by Name" (interactive)
            (dired-sort-other (concat dired-listing-switches " -tr"))))
        (define-key cnb/dired-sort-keymap "e"
          (lambda () "sort by Extension" (interactive)
            (dired-sort-other (concat dired-listing-switches " -X"))))
        (define-key cnb/dired-sort-keymap "E"
          (lambda () "sort by Extension (REV)" (interactive)
            (dired-sort-other (concat dired-listing-switches " -rX"))))
        (define-key cnb/dired-sort-keymap "?"
          (lambda () "sort help" (interactive)
            (message "s/S Size; e/E Extension; t/T Time; n/N Name"))))))


  (use-package dired-x
    :config
    (progn
      ;; Remember -  <C-x><ALT>o to omit hidden files
      (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))))

  (use-package dired+
    :ensure dired+

    :init
    (progn
      (diredp-toggle-find-file-reuse-dir 1)))

  (use-package wdired
    :init
    (progn
      (setq wdired-allow-to-change-permissions t)
      (setq wdired-confirm-overwrite t)))

#+end_src

*** Startup Messages

Don't want them.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(eval '(setq inhibit-startup-echo-area-message "colbell"))
#+end_src
*** Bookmarks
#+begin_src emacs-lisp
  (use-package bookmark
    :init
    (progn
      (setq bookmark-save-flag 1) ; Save bookmarks instantly
      (setq bookmark-default-file
            (expand-file-name "emacs.bmk" user-emacs-directory))))
#+end_src

Enhancements for bookmarks.

#+begin_src emacs-lisp
  (use-package bookmark+
    :ensure bookmark+)
#+end_src

Visual Bookmarks

#+begin_src emacs-lisp
(defun cnb/bm-hook
  (bm-buffer-save-all)
  (bm-repository-save))

(use-package bm
  :ensure bm
  :commands (bm-repository-load bm-buffer-restore bm-buffer-save bm-repository-save bm-buffer-save-all)
  :init
  (progn
    (setq bm-restore-repository-on-load t)
    (setq bm-repository-file (expand-file-name "bm-repository" user-emacs-directory))
    (setq bm-repository-size 1024)
    (setq-default bm-buffer-persistence t)
    (setq bm-highlight-style 'bm-highlight-only-line)
    (add-hook' after-init-hook 'bm-repository-load)
    (add-hook 'find-file-hooks 'bm-buffer-restore)
    (add-hook 'kill-buffer-hook 'bm-buffer-save)
    (add-hook 'kill-emacs-hook '(lambda nil
                                  (bm-buffer-save-all)
                                  (bm-repository-save))))
  :bind (("<C-f2>" . bm-toggle)
         ("<f2>"   . bm-next)
         ("<S-f2>" . bm-previous)))
#+end_src

*** Mouse Wheel

Smooth mouse wheel scrolling.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :ensure smooth-scrolling

    :config
    (progn
      (defun smooth-scroll (increment)
        (scroll-up increment) (sit-for 0.05)
        (scroll-up increment) (sit-for 0.02)
        (scroll-up increment) (sit-for 0.02)
        (scroll-up increment) (sit-for 0.05)
        (scroll-up increment) (sit-for 0.06)
        (scroll-up increment))

      (global-set-key [(mouse-5)] '(lambda () (interactive) (smooth-scroll 1)))
      (global-set-key [(mouse-4)] '(lambda () (interactive) (smooth-scroll -1)))))
#+end_src

*** Spelling

#+begin_src emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode)
#+end_src

Helm Fly-spell

#+begin_src emacs-lisp
  (use-package helm-flyspell
    :ensure helm-flyspell

    :init
    (progn
      (define-key flyspell-mode-map (kbd "C-;") 'helm-flyspell-correct)))

#+end_src

Dictionary Look-up

#+begin_src emacs-lisp
  (use-package helm-words
    :ensure helm-words)

#+end_src
** Frames
#+begin_src emacs-lisp
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (setq-default display-buffer-reuse-frames t)
#+end_src
**** Toggle Frame Split
#+begin_src emacs-lisp
  ;; From http://www.emacswiki.org/emacs-en/ToggleWindowSplit
  (defun cnb/toggle-frame-split ()
    "If the frame is split vertically, split it horizontally or vice versa .
  Assumes that the frame is only split into two                            . "
    (interactive)
    (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
    (let ((split-vertically-p (window-combined-p)))
      (delete-window) ; closes current window
      (if split-vertically-p
          (split-window-horizontally)
        (split-window-vertically)) ; gives us a split with the other win twice
      (switch-to-buffer nil))) ; restore the orig  win in this part of the frame

  (define-key ctl-x-4-map "t" 'cnb/toggle-frame-split)

#+end_src
** Buffers
*** Moving Around
**** Ace Jump Mode
#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :ensure ace-jump-mode
    :bind (("C-c SPC" . ace-jump-mode)))
#+end_src

**** Move By Visual Lines
#+begin_src emacs-lisp
  (setq line-move-visual nil)
#+end_src

**** Helm-swoop

This is a quick way to find lines.

#+begin_src emacs-lisp
  (use-package helm-swoop
    :ensure helm-swoop
    :bind
      ("M-i" . helm-swoop))
#+end_src

**** Dragging

Drag mode. Allows dragging by alt left up etc.

#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure drag-stuff
    :diminish drag-stuff-mode
    :init
    (progn
      (drag-stuff-global-mode t)))

#+end_src

#+RESULTS:
: t

**** Go to Last Change
#+begin_src emacs-lisp
  (use-package goto-chg
    :ensure goto-chg
    :bind (("M-? ." . goto-last-change)
           ("M-? ," . goto-last-change-reverse)))
#+end_src

**** Window Jump

Select window by direction keys.

#+begin_src emacs-lisp
  (use-package window-jump
    :ensure window-jump
    :init
    (progn
      (setq wj-wrap t))

    :bind (("C-S-<up>"    . window-jump-up)
           ("C-S-<down>"  . window-jump-down)
           ("C-S-<left>"  . window-jump-left)
           ("C-S-<right>" . window-jump-right)))
#+end_src

**** Ace Window

Select window by number.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure ace-window
    :bind (("C-x o" . ace-window))

    :init
    (progn
      (setq aw-scope 'frame)))
#+end_src

**** Ace Link

Bind 'o' to links in Help and Info buffers
#+begin_src emacs-lisp
  (use-package ace-link
    :ensure ace-link
    :config
    (progn
      (ace-link-setup-default)))
#+end_src

*** IBuffer

IBuffer is an advanced replacement for BufferMenu.

#+begin_src emacs-lisp
  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer))

    :config
    (progn
      ;; http://curiousprogrammer.wordpress.com/2009/04/02/ibuffer/
      (defun ibuffer-ediff-marked-buffers ()
        "ediff 2 marked buffers"
        (interactive)
        (let* ((marked-buffers (ibuffer-get-marked-buffers))
               (len (length marked-buffers)))
          (unless (= 2 len)
            (error (format "%s buffer%s been marked (needs to be 2)"
                           len (if (= len 1) " has" "s have"))))
          (ediff-buffers (car marked-buffers) (cadr marked-buffers))))

      (defadvice ibuffer (around ibuffer-point-to-most-recent activate) ()
                 "Open ibuffer with cursor at most recently viewed buffer."
                 (let ((current-buffer-name (buffer-name)))
                   ad-do-it
                   (ibuffer-jump-to-buffer current-buffer-name)))

      (define-key ibuffer-mode-map "e" 'ibuffer-ediff-marked-buffers)
      (setq ibuffer-default-sorting-mode 'alphabetic)

      (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (ibuffer-auto-mode 1)
                  (ibuffer-switch-to-saved-filter-groups "default")
                  (visual-line-mode -1)))

      ;; Replace the filename filter with a file name/directory name filter
      (eval-after-load "ibuf-ext"
        '(define-ibuffer-filter filename
             "Toggle current view to buffers with file or directory name matching QUALIFIER."
           (:description "filename"
                         :reader (read-from-minibuffer "Filter by file/directory name (regexp): "))
           (ibuffer-awhen (or (buffer-local-value 'buffer-file-name buf)
                              (buffer-local-value 'dired-directory buf))
             (string-match qualifier it)))))

    :init
    (progn
      (setq ibuffer-expert t) ;; Don't prompt closing unmodified buffers
      (setq ibuffer-show-empty-filter-groups nil)

      (setq ibuffer-formats
            '((mark modified read-only" "
                    (name 30 30 :left :elide)
                    " "
                    (size 9 -1 :right)
                    " "
                    (mode 16 16 :left :elide)
                    " " filename-and-process)
              (mark " "
                    (name 16 -1)
                    " " filename)))

      (setq ibuffer-saved-filter-groups
            (quote (("default"
                     ("ruby" (or
                              (mode . rinari-mode)
                              (mode . enh-ruby-mode)
                              (mode . ruby-mode)))
                     ("lisp" (or (mode . emacs-lisp-mode)
                                 (mode . lisp-interaction-mode)
                                 (mode . lisp-mode)))
                     ("clojure" (or (mode . clojure-mode)
                                    (mode . clojure-test-mode)))
                     ("java" (mode . java-mode))
                     ("js" (or
                            (mode . coffee-mode)
                            (mode . js-mode)
                            (mode . espresso-mode)))
                     ("css" (or
                             (mode . sass-mode)
                             (mode . css-mode)
                             (mode . scss-mode)))
                     ("scala" (or
                               (mode . scala-mode)
                               (mode . sbt-mode)))
                     ("code" (or
                              (mode . haskell-mode)
                              (mode . lua-mode)
                              (mode . python-mode)))
                     ("web markup" (or
                                    (mode . php-mode)
                                    (mode . haml-mode)
                                    (mode . slim-mode)
                                    (mode . html-mode)
                                    (mode . rhtml-mode)
                                    (name . ".rhtml")
                                    (mode . nXhtml-mode)
                                    (mode . web-mode)))
                     ("markup" (or
                                (mode . nxml-mode)
                                (mode . yaml-mode)
                                (mode . markdown-mode)))
                     ("conf" (or
                              (mode . muttrc-mode)
                              (mode . conf-xdefaults-mode)
                              (mode . conf-mode)
                              (mode . conf-unix-mode)
                              (mode . conf-space-mode)
                              (mode . conf-colon-mode)
                              (name . "\.env")))
                     ("dired" (mode . dired-mode))
                     ("browser" (or
                                 (mode . doc-view-mode)
                                 (mode . eww-mode)
                                 (mode . help-mode)
                                 (mode . Man-mode)
                                 (mode . woman-mode)))
                     ("org" (or
                             (name . "^\\*Calendar\\*$")
                             (name . "^diary$")
                             (mode . latex-mode)
                             (mode . org-mode)
                             (mode . muse-mode)))
                     ("shell-script" (mode . sh-mode))
                     ("compilation" (or
                                     (name . "^\\*Compile-Log\\*$")
                                     (mode . ruby-compilation-mode)))
                     ("term" (or
                              (mode . term-mode)
                              (mode . sql-interactive-mode)))
                     ("repl" (or
                              (mode . cider-repl-mode)
                              (mode . inf-ruby-mode)
                              (mode . nrepl-messages-mode)))
                     ("source control" (or
                                        (mode . magit-mode)
                                        (mode . magit-commit-mode)
                                        (mode . magit-status-mode)
                                        (mode . git-commit-mode)
                                        (name . "^magit")
                                        (name . "magit")))
                     ("jabber" (or
                                (mode . jabber-roster-mode)
                                (mode . jabber-chat-mode)))
                     ("Emacs customisation" (mode . Custom-mode))
                     ("mail" (or
                              (mode . bbdb-mode)
                              (mode . gnus-article-mode)
                              (mode . gnus-group-mode)
                              (mode . gnus-summary-mode)
                              (name . "\.bbdb")
                              (name . "\.newsrc-dribble")
                              (mode . mu4e-main-mode)
                              (mode . mu4e-headers-mode)
                              ;;(mode . rmail-mode)
                              (mode . mu4e-view-mode)
                              (mode . mu4e-compose-mode)))
                     ("helm" (or
                              (mode . helm-mode)
                              (name . "^\\*helm")))))))))
#+end_src

*** Unique Buffer Names
#+begin_src emacs-lisp
  (use-package uniquify
    :init
    (progn
      (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
      (setq uniquify-after-kill-buffer-p t)
      (setq uniquify-ignore-buffers-re "^\\*")))
#+end_src

*** UTF-8

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

*** Midnight Mode

Close buffers that haven't been used in =clean-buffer-list-delay-general= days.

#+begin_src emacs-lisp
  (use-package midnight
    :init
    (progn
      (setq clean-buffer-list-delay-general 2)))
#+end_src

#+RESULTS:
: t

*** White Space

Formatting of white space.

#+begin_src emacs-lisp
    (use-package whitespace
      :diminish whitespace-mode
      :diminish global-whitespace-mode

      :init
      (progn
        (setq whitespace-style '(face tabs empty trailing lines-tail))
        (set-default 'show-trailing-whitespace t)
        (setq whitespace-line-column 80)
        (global-whitespace-mode)
        (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))

        ;; Don't highlight WS in some modes.
        (dolist (hook '(shell-mode-hook compilation-mode-hook diff-mode-hook
                                        eww-mode-hook completion-list-mode-hook))
          (add-hook hook (lambda () (set-variable 'show-trailing-whitespace nil))))))
#+end_src

*** Saving

Flag script files as executable on save.

#+begin_src emacs-lisp
  (add-hook
   'after-save-hook
   'executable-make-buffer-file-executable-if-script-p)
#+end_src

** File Finding
*** Follow All Symbolic Links

#+begin_src emacs-lisp
  (setq find-file-visit-truename t)
#+end_src

*** Find in Repository

#+begin_src emacs-lisp
  (use-package find-file-in-repository
    :ensure find-file-in-repository
    :bind (("C-x f" . find-file-in-repository)))
#+end_src

*** Recent Files

Recent Files is a mode that keeps track of files that have been opened.

#+begin_src emacs-lisp
  (use-package recentf
    :ensure recentf

    :config
    (progn
      (setq recentf-save-file
            (file-truename (expand-file-name "recentf" user-emacs-directory)))
      (setq recentf-max-saved-items 250)

      ;; Files that we don't want to remember.
      (setq recentf-exclude '("~$" "/tmp/" "/ssh:" "/sudo:"))

      ;; We don't want to remember the recentf database file itself.
      (add-to-list 'recentf-exclude recentf-save-file)

      ;; Files within home that we don't want kept in recent files.
      ;; Because .emacs.d is a symlink to dotfiles/.emacs.d a file can have two
      ;; names so we need to ignore each file twice. The function (file-truename)
      ;; will expand symlinks.
      (let ((exclude-files '("places" ".ido.last" "elpa/**/.*" "emacs.bmk"
                             "url/cookies" "/home/colbell/.jabber-avatars/*")))
        (while exclude-files
          (let ((f (expand-file-name (car exclude-files) user-emacs-directory)))
            (add-to-list 'recentf-exclude f)
            (add-to-list 'recentf-exclude (file-truename f))
            (setq exclude-files (cdr exclude-files))))))

    (recentf-mode 1))
#+end_src

** Windows
*** Rotate Windows
#+begin_src emacs-lisp
  (defun cnb/rotate-windows ()
    "Rotate your windows" (interactive)
    (cond ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
          (t
           (setq i 1)
           (setq numWindows (count-windows))
           (while  (< i numWindows)
             (let* (
                    (w1 (elt (window-list) i))
                    (w2 (elt (window-list) (+ (% i numWindows) 1)))
                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))
                    (s1 (window-start w1))
                    (s2 (window-start w2))
                    )
               (set-window-buffer w1  b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1)
               (setq i (1+ i)))))))

  (global-set-key (kbd "M-r") 'cnb/rotate-windows)
#+end_src
** Selection

Shift/arrow keys extend selection.

#+begin_src emacs-lisp
  (setq shift-select-mode t)
#+end_src

Smart selection.

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure expand-region
    :bind (("C-=" . er/expand-region)))
#+end_src

** Copying, Killing and Moving
*** Kill ring Integration
#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src

*** Use Trash Folder

Move deleted files to system trash folder.

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src

*** Hungry Delete

Delete all whitespace when deleting.

#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure hungry-delete
    :init
    (progn
      (global-hungry-delete-mode)))
#+end_src

*** Delete Selection When Typing

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

*** zap-to-char and zap-up-to-char

M-z will execute =zap-to-char= while C-u M-z will execute
=ace-jump-zap-to-char=. There is a similar mapping for the 'up to char' functions.

#+begin_src emacs-lisp
  (use-package ace-jump-zap
    :ensure ace-jump-zap
    :bind (("M-z" . ace-jump-zap-to-char-dwim)
           ("C-M-z" . ace-jump-zap-up-to-char-dwim)))
#+end_src

*** Browse kill ring

#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :ensure browse-kill-ring

    :config
    (progn
      ;;(browse-kill-ring-default-keybindings)
      (setq browse-kill-ring-highlight-current-entry t)
      (setq browse-kill-ring-no-duplicates t)
      (setq browse-kill-ring-display-duplicates nil)
      (setq browse-kill-ring-highlight-inserted-item nil)
      (setq browse-kill-ring-show-preview nil)
      (setq browse-kill-ring-quit-action 'save-and-restore)))
#+end_src

*** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure undo-tree
    :diminish undo-tree-mode

    :config
    (global-undo-tree-mode)
    (progn
      (defadvice undo-tree-undo (around keep-region activate)
        (if (use-region-p)
            (let ((m (set-marker (make-marker) (mark)))
                  (p (set-marker (make-marker) (point))))
              ad-do-it
              (goto-char p)
              (set-mark m)
              (set-marker p nil)
              (set-marker m nil))
          ad-do-it))
      )
    )

#+end_src

*** Operate on Current Line

If no current selection then let C-W and M-W operate on the current
line. http://www.emacswiki.org/emacs/SlickCopy

#+begin_src emacs-lisp
(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (message "Copied line")
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
#+end_src

*** Erase Entire Buffer

#+begin_src emacs-lisp
(put 'erase-buffer 'disabled nil)
(global-set-key (kbd "C-c E")  'erase-buffer)
#+end_src

** Replacing
#+begin_src emacs-lisp
  (defalias 'qrr 'query-replace-regexp)
#+end_src

** Printing
#+begin_src emacs-lisp
  (require 'printing)
  (pr-update-menus t)

  (setenv "CUPS_SERVER" "localhost")
  (require 'cups nil t)

  (setq ps-printer-name t)

  (defun cnb-print-to-pdf ()
    "Print the current buffer to a PDF"
    (interactive)
    (let ((ps-file (concat (buffer-name) ".ps"))
          (pdf-file (concat (buffer-name) ".pdf")))
      (ps-spool-buffer-with-faces)
      (switch-to-buffer "*PostScript*")
      (write-file ps-file)
      (kill-buffer ps-file)
      (shell-command
       (concat "ps2pdf14 " ps-file " " pdf-file))
      (delete-file ps-file)
      (find-file pdf-file)
      (message (concat "PDF Saved to: " (buffer-name) ".pdf"))))
#+end_src

** Enable Commands

Enable commands disabled by default for novice users.

#+begin_src emacs-lisp
  ;;(setq  disabled-command-hook nil)
  (put 'narrow-to-region 'disabled nil)               ;; ("C-x n n")
  (put 'narrow-to-defun 'disabled nil)                ;; ("C-x n d")
  (put 'narrow-to-page 'disabled nil)                 ;; ("C-x n p")
  (put 'downcase-region 'disabled nil)                ;; ("C-x C-l")
  (put 'upcase-region 'disabled nil)                  ;; ("C-x C-u")
  (put 'dired-find-alternate-file 'disabled nil)      ;; 'a' in dired mode

  ;; (put 'erase-buffer 'disabled nil)
  ;; (global-set-key (kbd "C-c E")  'erase-buffer)
#+end_src

** Utilities

Increase/decrease buffer font size.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

#+end_src

*** Discover My Major

Discover key bindings and their meaning for the current Emacs major mode.

#+begin_src emacs-lisp
  (use-package discover-my-major
    :ensure discover-my-major
    :bind (("C-h C-m" . discover-my-major))
  )
#+end_src

** Programming Utilities
*** Source Control
**** Magit

Magit is a very cool GUI for Git.

#+begin_src emacs-lisp
    (use-package magit
      :ensure magit
      :diminish magit-auto-revert-mode

      :bind (("C-c g" . magit-status))

      :init
      (progn
        (add-hook 'magit-status-mode-hook
                  (lambda ()
                    (visual-line-mode -1)))
        (setq magit-diff-refine-hunk t)
        (setq magit-process-popup-time 60)
        (add-hook 'magit-log-edit-mode-hook 'flyspell-mode)
        (add-hook 'git-commit-mode-hook 'flyspell-mode))

      :config
      (progn
        (defun magit-toggle-whitespace ()
          (interactive)
          (if (member "-w" magit-diff-options)
              (magit-dont-ignore-whitespace)
            (magit-ignore-whitespace)))

        (defun magit-ignore-whitespace ()
          (interactive)
          (add-to-list 'magit-diff-options "-w")
          (magit-refresh))

        (defun magit-dont-ignore-whitespace ()
          (interactive)
          (setq magit-diff-options (remove "-w" magit-diff-options))
          (magit-refresh))

        (if git-rebase-mode-map
            (progn
              (define-key git-rebase-mode-map (kbd "M-d") 'git-rebase-move-line-down)
              (define-key git-rebase-mode-map (kbd "M-u") 'git-rebase-move-line-up)))
        (if magit-status-mode-map
            (define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace))))
#+end_src

**** Git Gutter

Show Git status in the fringe.

#+begin_src emacs-lisp
    (use-package git-gutter
      :ensure git-gutter
      :diminish git-gutter-mode

      :config
      (progn
        (git-gutter:linum-setup)
        (global-git-gutter-mode +1)))
#+end_src

**** Git Messenger

Show commit details for the current line.

#+begin_src emacs-lisp
  (defun cnb/git-msg-popup-hook ()
    (magit-commit-mode))

  (use-package git-messenger
    :ensure git-messenger

    :bind (("C-x v p" . git-messenger:popup-message))

    :init
    (progn
      (defun cnb/git-msg-popup-hook ()
        (magit-commit-mode))
      (setq git-messenger:show-detail t)
      (add-hook 'git-messenger:popup-buffer-hook 'cnb/git-msg-popup-hook)))
#+end_src

**** Git Timemachine

Show a file as at a particular commit.

#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure git-timemachine
    :init
    (progn
      (defalias 'gtm 'git-timemachine)))
#+end_src

**** Git Blame

An interactive, interative 'git blame' mode.

#+begin_src emacs-lisp
  (use-package mo-git-blame
    :ensure mo-git-blame)
#+end_src

*** Projectile

Projectile is a Project Interaction Library.

#+begin_src emacs-lisp
  ;; Projectile doesn't include f but crashes if it isn't there.
  ;; TODO: Test if this is still a problem.
  (use-package f
    :ensure f
    :init
    (progn
      (require 'f)))

  (use-package projectile
    :ensure projectile
    :diminish projectile-mode

    :init
    (progn
      (setq projectile-completion-system 'helm)
      (projectile-global-mode)))

  (use-package helm-projectile
    :ensure helm-projectile)
#+end_src

*** Smart Parens

Deal with parens in a smart way.

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure smartparens
    :diminish smartparens

    :config
    (progn
      (require 'smartparens-config nil t)
      (require 'smartparens-html)
      ;;(require 'smartparens-latex)

      (smartparens-global-mode)

      (show-smartparens-global-mode)

      (setq sp-autoescape-string-quote nil) ; Irritating.

      (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
      (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

      (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
      (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
      (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
      (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)

      (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
      (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
      (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

      (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
      (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

      (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp) ;; FIXME: Doesn't work
      (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)

      (sp-with-modes '(html-mode sgml-mode web-mode)
        (sp-local-pair "<" ">"))))
#+end_src

*** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure yasnippet
    :diminish yas-minor-mode

    :init
    (progn
      (yas-global-mode 1)))
      ;;(setq yas-prompt-functions '(yas-ido-prompt
      ;;                             yas-completing-prompt))


  (use-package helm-c-yasnippet
    :ensure helm-c-yasnippet
    :bind (("C-c y" . helm-yas-complete)))
#+end_src

*** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :ensure company
    :diminish company-mode

    :config
    (progn
      (push 'company-robe company-backends)
      (global-company-mode 1)
      (setq company-idle-delay nil))  ;; Auto popup is irritating.
    :bind ("C-c i" . company-complete))
#+end_src
*** Hippie Expansion
#+begin_src emacs-lisp
(use-package hippie-exp
  :init
  (progn
    (setq hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name try-expand-all-abbrevs
            try-expand-dabbrev try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill try-complete-lisp-symbol)))
  :bind
  ("M-/" . hippie-expand))
#+end_src

*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure rainbow-delimiters)
#+end_src

*** Flymake

Run syntax checking in the background and highlight any errors.

#+begin_src emacs-lisp
  (use-package flymake
    :ensure flymake
    :diminish flymake-mode
    :bind ("C-c C-e" . flymake-popup-current-error-menu))
#+end_src

Display flymake errors in the mini-buffer.

#+begin_src emacs-lisp
  (use-package flymake-cursor
    :ensure flymake-cursor)
#+end_src

*** Diff
#+begin_src emacs-lisp
  ;; Default to unified diffs that ignore white-space.
  (setq diff-switches "-u -w")
#+end_src

*** Speed Bar
#+begin_src emacs-lisp
  (use-package sr-speedbar
    :ensure sr-speedbar
    :bind (("C-o s" . sr-speedbar-toggle))

    :init
    (progn
      (setq sr-speedbar-auto-refresh t)
      (setq sr-speedbar-right-side nil)
      (setq sr-speedbar-skip-other-window-p t)
      (setq speedbar-show-unknown-files t)
      (setq speedbar-verbosity-level 2)))

#+end_src

*** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure rainbow-mode)
#+end_src

*** Color Identifiers Mode

Uniquely highlight each source code identifier based on its name.

#+begin_src emacs-lisp
  (use-package color-identifiers-mode
    :ensure color-identifiers-mode
    :diminish color-identifiers-mode
    :commands global-color-identifiers-mode

    :config
    (progn
      ;; Treat Web mode the same as HTML mode.
      (add-to-list
       'color-identifiers:modes-alist
       `(web-mode . ("</?!?"
                     "\\_</?!?\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)"
                     (nil font-lock-function-name-face))))
      (add-hook 'after-init-hook 'global-color-identifiers-mode)))

#+end_src

*** Eldoc

Show min ibuffer hints for Emacs Lisp.
#+begin_src emacs-lisp
  (use-package "eldoc"
    :diminish eldoc-mode
    :commands eldoc-mode

    :init
    (progn
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
#+end_src

*** Coding Hook

Based on Emacs Starter Kit. Some standard functionality for coding buffers.
#+begin_src emacs-lisp
  (defvar cnb/coding-hook nil
    "Hook that gets run on activation of any programming mode.")

  (defun cnb/add-watchwords ()
    "Tedxt to be emphaised in comments."
    (font-lock-add-keywords
     nil '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\):"
            1 font-lock-warning-face t))))

  (defun cnb/run-coding-hook ()
    "Enable things that are convenient across all coding buffers."
    (run-hooks 'cnb/coding-hook))


  ;;=======================
  ;; Things to do when you open a coding buffer.
  ;;=======================
  (add-hook 'cnb/coding-hook 'nlinum-mode)
  (add-hook 'cnb/coding-hook 'cnb/add-watchwords)
  (add-hook 'cnb/coding-hook 'hs-minor-mode)
  (add-hook 'cnb/coding-hook 'subword-mode)
  (add-hook 'cnb/coding-hook 'flyspell-prog-mode t)

  (when (fboundp 'yas/minor-mode)
    (add-hook 'cnb/coding-hook 'yas/minor-mode))

  (when (fboundp 'rainbow-delimiters-mode)
    (add-hook 'cnb/coding-hook 'rainbow-delimiters-mode))


  ;;=======================
  ;; Modes to treat as coding buffers
  ;;=======================
  (add-hook 'prog-mode-hook        'cnb/run-coding-hook)
  (add-hook 'conf-mode-hook        'cnb/run-coding-hook)
  (add-hook 'css-mode-hook         'cnb/run-coding-hook)
  (add-hook 'cucumber-mode-hook    'cnb/run-coding-hook)
  (add-hook 'diff-hook             'cnb/run-coding-hook)
  (add-hook 'feature-mode-hook     'cnb/run-coding-hook)
  (add-hook 'markdown-mode-hook    'cnb/run-coding-hook)
  (add-hook 'rhtml-mode-hook       'cnb/run-coding-hook)
  (add-hook 'yaml-mode-hook        'cnb/run-coding-hook)
  (add-hook 'lisp-interaction-mode 'cnb/run-coding-hook)

#+end_src

*** Bug Reference

Turn references to bug IDs into clickable links.

#+begin_src emacs-lisp
  (use-package bug-reference
    :demand

    :init
    (progn
      (add-hook 'text-mode-hook #'bug-reference-mode)
      (add-hook 'magit-log-mode-hook #'bug-reference-mode)
      ;; Force Magit log mode to load .dir-locals.el.
      (add-hook 'magit-log-mode-hook #'hack-dir-local-variables-non-file-buffer)
      (add-hook 'prog-mode-hook #'bug-reference-prog-mode)))
#+end_src

Add a .dir-locals.el to the root of the repository defining the link format and
the bug repository. E.G the following will point TWEB-???? references to Jira.

#+begin_src emacs-lisp[:eval never]
  ((nil
    .
    ((bug-reference-url-format . "https://kwelasolutions.atlassian.net/browse/%s")
     (bug-reference-bug-regexp . "\\(?2:TWEB-[0-9]+\\)"))))
#+end_src

** Programming Modes
*** Clojure
**** Clojure Mode.

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure clojure-mode

    :init
    (progn
      (add-hook 'clojure-mode-hook 'cider-mode)
      (add-hook 'clojure-mode-hook
                (lambda ()
                  (clj-refactor-mode 1)
                  (cljr-add-keybindings-with-prefix "C-o C-r")))

      (define-key clojure-mode-map (kbd "C-o j") 'cider-jack-in)
      (define-key clojure-mode-map (kbd "C-o J") 'cider-restart)
      (define-key clojure-mode-map (kbd "C-o a") 'align-cljlet)

      (define-clojure-indent
        (defroutes 'defun)
        (GET 2)
        (POST 2)
        (PUT 2)
        (DELETE 2)
        (HEAD 2)
        (ANY 2)
        (context 2)
        (for-all 1)
        (such-that 1)
        (let-routes 1)
        (run-db 2)
        (defspec 'defun))))
#+end_src

Extra font clocking for Clojure mode.

#+begin_src emacs-lisp
(use-package clojure-mode-extra-font-locking
  :ensure clojure-mode-extra-font-locking)
#+end_src

**** Cheat Sheet

Clojure documentation.

#+begin_src emacs-lisp
(use-package clojure-cheatsheet
  :ensure clojure-cheatsheet
  :init
  (progn
    (defalias 'ccs 'clojure-cheatsheet)))
#+end_src

**** Align let forms
#+begin_src emacs-lisp
(use-package align-cljlet
  :ensure align-cljlet)
#+end_src
**** Refactoring
#+begin_src emacs-lisp
(use-package clj-refactor
  :ensure clj-refactor)
#+end_src

**** Cider Clojure IDE and REPL

#+begin_src emacs-lisp
  (use-package cider
    :ensure cider

    :init
    (progn
      (defalias 'cveb 'cider-visit-error-buffer)
      (setq nrepl-log-messages t)
      (require 'cider-eldoc)
      (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
      (add-hook 'cider-repl-mode-hook 'subword-mode)
      (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
      (setq cider-repl-use-clojure-font-lock t)
      (setq nrepl-hide-special-buffers t)
      (setq cider-show-error-buffer nil)
      (setq cider-auto-select-error-buffer nil)
      (setq cider-repl-pop-to-buffer-on-connect nil)
      (setq cider-repl-history-file "~/.emacs.d/cider-repl-history")
      (setq cider-repl-history-size 1000)))

  (use-package cider-decompile
    :ensure cider-decompile)
#+end_src

**** Slamhound
#+begin_src emacs-lisp
  (use-package slamhound
    :ensure slamhound
    :commands slamhound)
#+end_src

**** Snippets
#+begin_src emacs-lisp
  (use-package clojure-snippets
    :ensure clojure-snippets)
#+end_src

*** Cucumber
#+begin_src emacs-lisp
  (use-package feature-mode
    :ensure feature-mode
    :mode (("\.feature$" . feature-mode)))
#+end_src

*** Javascript
#+begin_src emacs-lisp
  (eval-after-load 'js
    '(progn
       (setq js-indent-level 2)
       (define-key js-mode-map (kbd ",") 'self-insert-command)
       (add-hook
        'js-mode-hook
        (lambda ()
          (push '("function" . "\u0192") prettify-symbols-alist)))))
#+end_src
*** Coffeescript
#+begin_src emacs-lisp
  (use-package flymake-coffee
    :ensure flymake-coffee)

  (use-package coffee-mode
    :ensure coffee-mode
    :mode (("\\.coffee.erb$" . coffee-mode))

    :init
    (progn
      (defun coffee-custom ()
        "coffee-mode-hook"
        (make-local-variable 'tab-width)
        (set 'tab-width 2)
        (setq coffee-tab-width 2)
        (setq coffee-debug-mode t)
        (setq js-indent-level 2)
        (flymake-coffee-load))

      (add-hook 'coffee-mode-hook
                '(lambda() (coffee-custom)))
      ))

#+end_src

*** Ruby
**** Ruby Mode
#+begin_src emacs-lisp
  (use-package ruby-mode
    :ensure ruby-mode
    :mode (("Capfile$"     . ruby-mode)
           ("Gemfile$"     . ruby-mode)
           ("Rakefile$"    . ruby-mode)
           ("Vagrantfile$" . ruby-mode)
           ("\\.gemspec$"  . ruby-mode)
           ("\\.prawn$"    . ruby-mode)
           ("\\.rake$"     . ruby-mode)
           ("\\.rjs$"      . ruby-mode)
           ("\\.ru$"       . ruby-mode)
           ("\\.rb$"       . ruby-mode))

    :init
    (progn
      (defun cnb/ruby-setup ()
        (robe-mode)
        (setq outline-regexp " *\\(def \\|class\\|module\\|describe \\|it \\)")
        (setq imenu-generic-expression '(("Methods"  "^\\( *\\(def\\) +.+\\)" 1)))
        (yard-mode)
        (outline-minor-mode)
        (ruby-block-mode t)
        (flymake-ruby-load)
        (ignore-errors (ruby-refactor-mode-launch))
        (setq-local prettify-symbols-alist '(("lambda"  . ?Î»)))))

    :config
    (progn
      ;; I use C-x t for toggling globally
      (define-key ruby-mode-map "\C-xt" nil)

      (add-hook 'ruby-mode-hook 'cnb/ruby-setup)
      (define-key ruby-mode-map (kbd "RET") 'newline-and-indent)
      )
    )
#+end_src

**** Ruby Refactoring
#+begin_src emacs-lisp
  (use-package ruby-refactor
    :ensure ruby-refactor
    :diminish ruby-refactor-mode)
#+end_src

**** Ruby Compilation
#+begin_src emacs-lisp
  (use-package ruby-compilation
    :ensure ruby-compilation)
#+end_src

**** Ruby Block
#+begin_src emacs-lisp
  (use-package ruby-block
    :ensure ruby-block
    :diminish ruby-block-mode)
#+end_src

**** RuboCop
#+begin_src emacs-lisp
    (use-package rubocop
      :ensure rubocop
      :diminish rubocop-mode)
#+end_src

**** RVM
#+begin_src emacs-lisp
  (use-package rvm
    :ensure rvm
    :init
    (progn
      (rvm-autodetect-ruby)))
#+end_src
**** Robe
#+begin_src emacs-lisp
    (use-package robe
      :ensure robe
      :diminish robe-mode)

#+end_src
**** Ruby Flymake

#+begin_src emacs-lisp
  (use-package flymake-ruby
    :ensure flymake-ruby)
#+end_src

**** Yard Mode

Font lock for Ruby Yard comments.

#+begin_src emacs-lisp
    (use-package yard-mode
      :ensure yard-mode
      :diminish yard-mode)
#+end_src

**** Inf-ruby
#+begin_src emacs-lisp
  (use-package inf-ruby
    :ensure inf-ruby)
#+end_src

*** Rspec
#+begin_src emacs-lisp
  (use-package rspec-mode
    :ensure rspec-mode)
#+end_src

*** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure haskell-mode)
#+end_src

*** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure lua-mode)
#+end_src

*** Emacs Lisp

Put each occurrence of "use-package" into an Imenu section called "Packages".

#+begin_src emacs-lisp
  (defun cnb/elisp-packages ()
    (add-to-list 'imenu-generic-expression '("Packages" "(use-package \\([^)\n]*\\).*$" 1) t))

  (add-hook 'emacs-lisp-mode-hook 'cnb/elisp-packages)
#+end_src

*** Lisp Like Modes
#+begin_src emacs-lisp
  (defun cnb/imenu-lisp-sections ()
    (setq imenu-prev-index-position-function nil)   ;; FIXME: DO I need this?
    (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

  (setq lisp-modes '(common-lisp-mode
                     clojure-mode
                     emacs-lisp-mode
                     ielm-mode
                     lisp-interaction-mode
                     lisp-mode
                     scheme-mode))

  (dolist (mode lisp-modes)
    (add-hook (intern (format "%s-hook" mode)) 'cnb/imenu-lisp-sections))
#+end_src

** Markup Modes
*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode (("\\.yml$" . yaml-mode) ("\\.ya?ml$" . yaml-mode))
    :config
    (progn
      (add-hook 'yaml-mode-hook
                (lambda ()
                  (define-key yaml-mode-map (kbd "RET") 'newline-and-indent)
                  (electric-indent-local-mode -1)))))

#+end_src

*** Markdown
#+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure markdown-mode
      :commands markdown-mode
      :mode (("\\.md$" . markdown-mode) ("\\.markdown$" . markdown-mode))

      :init
      (progn
        (add-hook 'markdown-mode 'flyspell-mode)))

#+end_src

*** HAML
#+begin_src emacs-lisp
  (use-package flymake-haml
    :ensure flymake-haml)

  (use-package haml-mode
    :ensure haml-mode

    :mode (("\\.haml\\'"     . haml-mode)
           ("\\.hamlbars\\'" . halm-mode))

    :init
    (progn
      (ignore-errors (robe-mode))
      (local-set-key (kbd "RET") 'newline-and-indent)
      (add-hook
       'haml-mode-hook
       (lambda ()
         (electric-indent-local-mode -1)
         (rvm-activate-corresponding-ruby)
         (flymake-haml-load)))))

#+end_src

*** Handlebars
#+begin_src emacs-lisp
  (use-package handlebars-mode
    :ensure handlebars-mode)
#+end_src
*** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure web-mode
    :bind (("C-c C-v" . browse-url-of-buffer))

    :mode (("\\.php\\'"       . web-mode)
           ("\\.phtml\\'"     . web-mode)
           ("\\.tpl\\.php\\'" . web-mode)
           ("\\.jsp\\'"       . web-mode)
           ("\\.as[cp]x\\'"   . web-mode)
           ("\\.erb\\'"       . web-mode)
           ("\\.mustache\\'"  . web-mode)
           ("\\.djhtml\\'"    . web-mode)
           ("\\.html?\\'"     . web-mode))

    :init
    (progn
      (setq-default web-mode-markup-indent-offset 2)
      (setq-default web-mode-css-indent-offset 2)
      (setq-default web-mode-code-indent-offset 2)))
#+end_src

*** CSS
#+begin_src emacs-lisp
  (setq css-indent-offset 2)
  (add-hook 'css-mode-hook 'rainbow-mode)

#+end_src

*** SASS
#+begin_src emacs-lisp
  (use-package flymake-sass
    :ensure flymake-sass)

  (use-package sass-mode
    :ensure sass-mode
    :mode ("\\.sass\\'" . sass-mode)

    :init
    (progn
      (setq scss-compile-at-save nil)
      (add-hook 'sass-mode-hook 'rainbow-mode)
      (add-hook 'sass-mode-hook 'flymake-sass-load)))

#+end_src
*** Less CSS
#+begin_src emacs-lisp
  (use-package less-css-mode
    :ensure less-css-mode)
#+end_src

*** Text
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)

#+end_src

** Other Major Modes
*** Crontab
#+begin_src emacs-lisp
  (use-package crontab-mode
    :ensure crontab-mode
    :commands crontab-mode
    :mode (("\\.cron\\(tab\\)?\\'" . crontab-mode)
           ("cron\\(tab\\)?\\."    . crontab-mode))
    )
#+end_src

*** Email
**** Mutt Configuration
#+begin_src emacs-lisp
  (use-package muttrc-mode
    :ensure muttrc-mode
    :mode ("muttrc" . muttrc-mode))

#+end_src
**** Mutt Compose
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("/tmp/mutt" . mail-mode))
#+end_src
*** Docview
#+begin_src emacs-lisp
  (setq doc-view-resolution 192)  ;; makes PDFs look better
  (setq doc-view-continuous t)
#+end_src

*** Terminal
#+begin_src emacs-lisp
  (add-hook
   'term-mode-hook
   (function
    (lambda ()
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
      (make-local-variable 'mouse-yank-at-point)
      (make-local-variable 'transient-mark-mode)
      (setq mouse-yank-at-point t)
      (setq transient-mark-mode nil)
      (auto-fill-mode -1)
      (setq tab-width 2))))
#+end_src

Close term buffers when terminal is exited.

#+begin_src emacs-lisp
  (defun cnb/term-exec-hook ()
    (let* ((buff (current-buffer))
           (proc (get-buffer-process buff)))
      (set-process-sentinel
       proc
       `(lambda (process event)
          (if (string= event "finished\n")
              (kill-buffer ,buff))))))

  (add-hook 'term-exec-hook 'cnb/term-exec-hook)
#+end_src

*** Org
#+begin_src emacs-lisp
  (use-package org
    :diminish org-mode)
#+end_src

#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/org/")
  (setq org-default-notes-file (concat org-directory "/organizer.org"))
  (setq org-agenda-files (quote ("~/Dropbox/org/personal.org" "~/Dropbox/org/work.org")))

  (add-hook 'org-mode-hook 'turn-off-auto-fill)
#+end_src

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "STARTED(n)" "|" "DONE(d!/!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("STARTED" :foreground "cyan" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
#+end_src

#+begin_src emacs-lisp
  (use-package deft
    :ensure deft
    :bind (("<f9>" . deft))

    :init
    (progn
      (setq
       deft-extension "org"
       deft-directory(concat org-directory "deft/")
       deft-text-mode 'org-mode
       deft-extension "org")))

#+end_src

*** log4j
#+begin_src emacs-lisp
  (use-package log4j-mode
    :ensure log4j-mode)
#+end_src

** Web Browsers
*** w3m
#+begin_src emacs-lisp
  (setq w3m-default-display-inline-images t)
  (setq w3m-use-cookies t)
  (require 'w3m-load nil t) ;;w3m autoloads
#+end_src

** Key Maps
*** Global Map

#+begin_src emacs-lisp
  (global-set-key (kbd "<f8> <f1>") 'repeat-complex-command)
#+end_src

When you drag and drop a file into an Emacs buffer open it instead of
inserting it into the current buffer.

#+begin_src emacs-lisp
  (define-key global-map [ns-drag-file] 'ns-find-file)
#+end_src

I press these too often

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

*** Toggle Map

Toggle various minor modes, based on an Endless Parentheses Blog [[http://endlessparentheses.com/the-toggle-map-and-wizardry.html][post]]

#+begin_src emacs-lisp
  (define-prefix-command 'cnb/toggle-map)
  (define-key ctl-x-map "t" 'cnb/toggle-map)

  (define-key cnb/toggle-map "d" 'toggle-debug-on-error)
  (define-key cnb/toggle-map "l" 'nlinum-mode)
  (define-key cnb/toggle-map "n" 'cnb/narrow-or-widen-dwim)
  (define-key cnb/toggle-map "r" 'dired-toggle-read-only)
  (define-key cnb/toggle-map "s" 'subword-mode)
  (define-key cnb/toggle-map "v" 'visual-line-mode)
#+end_src

*** Launcher Map

Launch various tools.

#+begin_src emacs-lisp
  (define-prefix-command 'cnb/launcher-map)
  (define-key ctl-x-map "l" 'cnb/launcher-map)
  (define-key cnb/launcher-map "c" 'calc)
  (define-key cnb/launcher-map "d" 'ediff-buffers)
  (define-key cnb/launcher-map "f" 'find-dired)
  (define-key cnb/launcher-map "p" 'paradox-list-packages)
  (define-key cnb/launcher-map "t" 'proced)
#+end_src

** Session

Remember current position in file.

#+begin_src emacs-lisp
  (use-package saveplace
    :demand

    :init
    (progn
      (setq-default save-place t)
      (setq save-place-file (expand-file-name "places" user-emacs-directory))))
#+end_src

Remember open buffers.

#+begin_src emacs-lisp
  (use-package desktop
    :demand t

    :init
    (progn
     (desktop-save-mode)
     (setq desktop-restore-frames nil) ;; Probs with emacsclient
     (setq desktop-load-locked-desktop nil)
     (setq desktop-restore-eager 10)   ;; Open first X immed then rest in background

     (setq desktop-globals-to-save (delete 'tags-file-name desktop-globals-to-save))
     (setq desktop-globals-to-save (delete 'tags-table-list desktop-globals-to-save)))

    :config
    (progn
      (add-to-list 'desktop-modes-not-to-save 'dired-mode)))
#+end_src

Remember command and search history.

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (progn
      (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
      (savehist-mode)))
#+end_src

** Put somewhere

#+begin_src emacs-lisp
(defalias 'idm 'info-display-manual)
#+end_src

#+begin_src emacs-lisp
  (use-package esup
    :ensure esup)

#+end_src

#+begin_src emacs-lisp
  ;; From http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
  (defun cnb/narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, subtree, or defun, whichever applies
  first.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode) (org-narrow-to-subtree))
          (t (narrow-to-defun))))



  (defun cnb/open-external()
    "Open file associated with current buffer or files marked in dired buffer
  in native application through xdg-open"
    (interactive)
    (let (my_files)
      (if (string-equal major-mode "dired-mode")
          (setq my_files (dired-get-marked-files))
        (setq my_files (list (buffer-file-name))))

      (when my_files
        (dolist (fn my_files)
          (start-process "" nil "xdg-open" fn)))))

#+end_src


#+begin_src emacs-lisp
  ;; Editing within Chrome
  (use-package edit-server
    :ensure edit-server

    :init
    (progn
      ;; To make work in Gmail compose window.
      (autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
      (autoload 'edit-server-maybe-htmlize-buffer   "edit-server-htmlize" "edit-server-htmlize" t)
      (add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
      (add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)))

#+end_src

#+begin_src emacs-lisp
  (use-package httpcode
    :ensure httpcode)
#+end_src

By default truncate long lines.

#+begin_src emacs-lisp
(toggle-truncate-lines 1)
(setq-default truncate-lines t)
#+end_src

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure htmlize)


  (setq sql-input-ring-file-name "~/.emacs.d/sql_history")



  ;;(setq browse-url-browser-function 'browse-url-firefox)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium-browser")

  (setq compilation-scroll-output t)
  (global-auto-revert-mode t)
  (setq auto-revert-verbose nil)
  (setq global-auto-revert-non-file-buffers t)

  (setq redisplay-dont-pause t)

  (setq sentence-end-double-space nil)
  (setq apropos-do-all t)
  (auto-image-file-mode)




  (set-default 'imenu-auto-rescan t)

  (setenv "PAGER" "cat")


  (setq echo-keystrokes 0.1)


  (setq shift-select-mode t
        mouse-yank-at-point t
        ;;save-interprogram-paste-before-kill t
        require-final-newline t
        ediff-window-setup-function 'ediff-setup-windows-plain)

#+end_src


#+begin_src emacs-lisp
  (use-package ack-and-a-half
    :ensure ack-and-a-half)

  (use-package auctex
    :ensure auctex
    :defer)

  (use-package csv-mode
    :ensure csv-mode)

  ;; Required by projectile.
  (use-package f
    :ensure f
    :defer)
#+end_src

** Do I need these?

#+begin_src emacs-lisp
      ;; (setq truncate-partial-width-windows nil)
      ;; (electric-layout-mode)
      ;; (setq completion-cycle-threshold 5)
      ;; (setq redisplay-dont-pause t)
      ;; How often do I key a comma without a trailing space?
      ;; Commented out as I just can't stop pressing the space-bar
      ;; (global-set-key (kbd ",") (lambda() (interactive) (insert ", ")))
    (use-package findr
      :ensure findr)

  (use-package inflections
    :ensure inflections)

  (use-package jump
    :ensure jump)
#+end_src
